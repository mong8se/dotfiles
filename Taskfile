#!/usr/bin/env bash

# https://github.com/adriancooney/Taskfile

set -e

function stringToMd5ToHexToBase42(){
  # trim new line and md5
  MD5=$(tr -d '\n' <<< $1 | openssl dgst -md5 -r)

  # switch to lower case because bc demands it
  # strip trailing *stdin\n from openssl output
  HEXVALUE=$(tr "[:lower:]" "[:upper:]" <<< ${MD5/ *})

  # set up an array of our base 42 characters
  # to look up each digit against
  BASE42=($(echo {0..8} {a..z} M O A Z A M I))

  # it's important obase come before ibase so you can
  # specify the obase in base 10. Otherwise you have
  # to specify the obase in the base of the ibase
  for i in $(BC_LINE_LENGTH=42 bc <<< "obase=42; ibase=16; $HEXVALUE"); do

    # We're using bc's built in line break
    # to truncate at 13 characters

    # bc is going to output each digit as a zero led
    # two digit string followed by a space (3 chars):
    #
    #   01 35 12

    # so we're setting its line length to
    #    3 chars x (13 + 1) = 42

    # after that bc puts a \ and a new line
    # so we detect the \ and break the loop
    if [ $i = '\' ] ; then break ; fi

    # we need to cast to base 10 in the array
    # look up because bash will barf on the 
    # leading zeros
    echo -n ${BASE42[$(( 10#$i ))]}
  done && echo
}

# What do you get if you multiply six by nine
export HOST42=$(stringToMd5ToHexToBase42 $(hostname))

function task:hostname {
  echo $HOST42
  echo
}

function task:submodule:init {
  git submodule update --init --recursive
}

function task:submodule:update {
  git submodule update --remote
}

function task:fzf:install {(
  cd Resources/fzf;
  echo 'Install fzf...';
  yes | ./install --xdg --no-update-rc
)}

VI_BIN=$(which nvim || which vim || which vi | tr -d "\n")

function task:vi:install {
  ${VI_BIN} -u config/nvim/plugs.vim -es +PlugInstall
}

function task:vi:update {
  ${VI_BIN} -u config/nvim/plugs.vim -es +PlugUpdate
}

function task:vi:cleanup {
  ${VI_BIN} -u config/nvim/plugs.vim -es +PlugClean
}

function task:make_alias_links {
  node ./tasks.js make_alias_links
}

function task:cleanup {
  node ./tasks.js cleanup
}

function task:autocleanup {
  node ./tasks.js autocleanup
}

function task:implode {
  node ./tasks.js implode
}

function task:install {
  node ./tasks.js install
}

function task:update {
  task:install
  task:make_alias_links
  task:autocleanup
}

function task:init {
  task:submodule:init
  task:submodule:update
  task:vi:install
  task:fzf:install
  task:install
}

function task:upgrade {
  task:submodule:update
  task:vi:update
  task:fzf:install
}

function task:default {
  task:update
}

function task:help {
  echo "$0 <task> <args>"
  echo "Tasks:"

  # We pick out the `task:*` functions
  compgen -A function | sed -En 's/task:(.*)/\1/p' | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time "task:${@:-default}"
