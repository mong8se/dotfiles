#!/usr/bin/env bash

# https://github.com/adriancooney/Taskfile

set -e

function hostname {
  echo $HOST42
  echo
}

function submodule:init {
  git submodule update --init --recursive
}

function submodule:update {
  git submodule update --remote
}

VI_BIN=$(which nvim || which vim || which vi | tr -d "\n")

export REPO_LOCATION="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
TASKS=$REPO_LOCATION/Resources/tasks.js

function vi:install {
  ${VI_BIN} -u config/nvim/plugs.vim -es +PlugInstall
}

function vi:update {
  ${VI_BIN} -u config/nvim/plugs.vim -es +PlugUpdate
}

function vi:cleanup {
  ${VI_BIN} -u config/nvim/plugs.vim -es +PlugClean
}

function homebrew:install {
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

function homebrew:bundle {
  brew bundle --no-lock --file $REPO_LOCATION/Resources/Brewfile
}

function make_alias_links {
  node $TASKS make_alias_links
}

function cleanup {
  node $TASKS cleanup
}

function autocleanup {
  node $TASKS autocleanup
}

function implode {
  node $TASKS implode
}

function install {
  node $TASKS install
}

function update {
  install
  make_alias_links
  autocleanup
}

function init {
  submodule:init
  submodule:update
  vi:install
  install
}

function upgrade {
  submodule:update
  vi:update
}

function default {
  update
}

function help {
  echo "$0 <task> <args>"
  echo "Tasks:"
  compgen -A function | sed -E '/(help|default)/d' | cat -n
  echo
  type default | sed -e '1d; 2s/()/task:/; s/^/    /'
  echo
}

# What do you get if you multiply six by nine
export HOST42

# set up an array of our base 42 characters
# to look up each digit against
BASE42=($(echo {0..8} {a..z} M O A Z A M I))
# Repeating A and M will cause collisions but for
# this use case, odds are slim it will matter

# trim new line and md5 the hostname
MD5=$(/bin/hostname | tr -d "\n" | openssl dgst -md5 -r)

# switch to lower case because bc demands it
# strip trailing *stdin\n from openssl output
HEXVALUE=$(tr "[:lower:]" "[:upper:]" <<< ${MD5/ *})

# it's important obase come before ibase so you can
# specify the obase in base 10. Otherwise you have
# to specify the obase in the base of the ibase
for i in $(BC_LINE_LENGTH=42 bc <<< "obase=42; ibase=16; $HEXVALUE"); do

  # We're using bc's built in line break
  # to truncate at 13 characters

  # bc is going to output each digit as a zero led
  # two digit string followed by a space (3 chars):
  #
  #   01 35 12

  # so we're setting its line length to
  #    3 chars x (13 + 1) = 42

  # after that bc puts a \ and a new line
  # so we detect the \ and break the loop
  if [ $i = '\' ] ; then break ; fi

  # we need to cast to base 10 in the array
  # look up because bash will barf on the
  # leading zeros
  HOST42=$HOST42${BASE42[$(( 10#$i ))]}
done

TIMEFORMAT="Task completed in %3lR"
time "${@:-default}"
